import os
import re
import requests
from dotenv import load_dotenv
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

# Importar el diccionario desde el archivo numeros_significados.py
from numeros_significados import numeros_significados

# Cargar variables de entorno desde el archivo .env
load_dotenv()
TOKEN_TELEGRAM = os.getenv("TOKEN_TELEGRAM")


# Funci√≥n para el comando /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        f"¬°Hola {update.effective_user.first_name}! Bienvenido, me llamo Bender y soy un bot ü§ñ"
    )


# Funci√≥n para manejar mensajes de texto
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_text = update.message.text.lower()
    user_name = update.effective_user.first_name

    # Patr√≥n regex para detectar preguntas sobre el significado de un n√∫mero
    numero_pregunta_patron = re.compile(
        r"cu[a√°]l es el significado del n[u√∫]mero (\d{2})"
    )

    # Verificar si el texto contiene una pregunta sobre un n√∫mero
    match = numero_pregunta_patron.search(user_text)
    if match:
        numero = match.group(1)  # Extraer el n√∫mero de la pregunta
        palabras = numeros_significados.get(numero, [])
        if palabras:
            respuesta = f"El n√∫mero {numero} est√° asociado con: {', '.join(palabras)}"
        else:
            respuesta = f"No hay palabras asociadas al n√∫mero {numero}"

        await update.message.reply_text(respuesta)
    else:
        # Aqu√≠ va el resto de los casos que el bot maneja
        match user_text:
            case text if "hola" in text:
                await update.message.reply_text(f"Hola {user_name}, ¬°bienvenido! üòä")
            case text if "adi√≥s" in text or "chao" in text:
                await update.message.reply_text(f"¬°Hasta luego, {user_name}! üëã")
            case text if "gracias" in text:
                await update.message.reply_text(f"¬°De nada, {user_name}! üòä")
            case text if "c√≥mo est√°s" in text:
                await update.message.reply_text(
                    f"¬°Estoy muy bien, {user_name}! ¬øY t√∫? üòÑ"
                )
            case text if "buenos d√≠as" in text:
                await update.message.reply_text(
                    f"¬°Buenos d√≠as, {user_name}! ‚òÄÔ∏è Espero que tengas un gran d√≠a."
                )
            case text if "buenas noches" in text:
                await update.message.reply_text(
                    f"¬°Buenas noches, {user_name}! üåô Que descanses."
                )
            case text if "cu√©ntame un chiste" in text:
                await update.message.reply_text(
                    "¬øPor qu√© el libro de matem√°ticas estaba triste? ¬°Porque ten√≠a demasiados problemas! üòÇ"
                )
            case text if "cu√°l es tu nombre" in text:
                await update.message.reply_text(
                    "Soy Bender, un bot amigable, siempre aqu√≠ para ayudarte. ü§ñ"
                )
            case text if "eres muy gracioso" in text:
                await update.message.reply_text(
                    f"¬°Me alegra que pienses eso, {user_name}! üòÑ"
                )
            case text if "previsi√≥n del tiempo" in text:
                if update.message.chat.type == "private":
                    await update.message.reply_text(
                        "Por favor, comparte tu ubicaci√≥n para decirte el clima actual. üåç",
                        reply_markup=ReplyKeyboardMarkup(
                            [
                                [
                                    KeyboardButton(
                                        "Compartir ubicaci√≥n üìç", request_location=True
                                    )
                                ]
                            ],
                            one_time_keyboard=True,
                            resize_keyboard=True,
                        ),
                    )
                else:
                    await update.message.reply_text(
                        "Para saber el clima actual, comp√°rteme tu ubicaci√≥n en un mensaje privado haciendo clic aqu√≠: t.me/bender0_bot üåç"
                    )


# Funci√≥n para manejar la ubicaci√≥n del usuario
async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    lat = update.message.location.latitude
    lon = update.message.location.longitude

    # API de OpenWeatherMap
    TOKEN_OPENWEATHER = os.getenv("TOKEN_OPENWEATHER")
    url = f"http://api.openweathermap.org/data/2.5/forecast?lat={lat}&lon={lon}&appid={TOKEN_OPENWEATHER}&units=metric&lang=es"

    response = requests.get(url).json()

    # Verificar si hay datos en la respuesta
    if "list" in response:
        # Usar el primer pron√≥stico para otras informaciones
        first_forecast = response["list"][0]
        weather_description = first_forecast["weather"][0]["description"]
        temperature = first_forecast["main"]["temp"]
        city = response["city"]["name"]

        # Acceder a la sensaci√≥n t√©rmica, humedad, presi√≥n y velocidad del viento
        feels_like = first_forecast["main"]["feels_like"]  # Sensaci√≥n t√©rmica
        humidity = first_forecast["main"]["humidity"]  # Humedad
        pressure = first_forecast["main"]["pressure"]  # Presi√≥n
        wind_speed = first_forecast["wind"]["speed"]  # Velocidad del viento

        # Determinar el icono basado en la temperatura
        if temperature < 20:
            temp_icon = "ü•∂"  # Fr√≠o
        elif 20 <= temperature <= 26:
            temp_icon = "üòä"  # Bienestar
        else:
            temp_icon = "ü•µ"  # Calor

        await update.message.reply_text(
            f"El tiempo en {city} es: {weather_description} con una temperatura de {temperature}¬∞C üå°Ô∏è\n"
            f"Pero se siente como {feels_like}¬∞C {temp_icon}\n"
            f"Humedad: {humidity}% üíß\n"
            f"Presi√≥n: {pressure} hPa ‚òÅÔ∏è\n"
            f"Velocidad del viento: {wind_speed} m/s üí®\n"
        )
    else:
        await update.message.reply_text(
            "No pude obtener el clima en este momento, intenta de nuevo m√°s tarde. ‚ùå"
        )


# Funci√≥n para manejar errores
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    print(f"Update {update} caused error {context.error}")


# Configuraci√≥n del bot
if __name__ == "__main__":
    # Crear la aplicaci√≥n del bot
    application = ApplicationBuilder().token(TOKEN_TELEGRAM).build()

    # Registrar los manejadores de comandos y mensajes
    application.add_handler(CommandHandler("start", start))
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
    )
    application.add_handler(MessageHandler(filters.LOCATION, handle_location))

    # Manejo de errores
    application.add_error_handler(error_handler)

    # Iniciar el bot
    print("Bot corriendo...")
    application.run_polling()
